AWSTemplateFormatVersion: 2010-09-09
Description: This template creates an application used to automate importing of swagger.json files into API Gateway API(s)
Metadata: {}
Parameters:
  SourceCodeS3Bucket:
    Type: String
    Description: The S3 Bucket containing (this) cloud formation template and lambda code zip file
    ConstraintDescription: Required field
    Default: !Sub source-code-bucket-${AWS::AccountId}

  SourceCodeZipFileKey:
    Type: String
    Description: The S3 path (or key) to the .zip file - this is the full path starting with /and/with/complete/path/to/update-api-gateway-resources.zip
    ConstraintDescription: Required field
    Default: update-api-gateway-resources.zip

  DefaultApiGatewayRegion:
    Type: String
    Description: Select a region where API Gateway endpoints are located by default - this configures an ENV variable for the lambda function
    MinLength: 1
    ConstraintDescription: Required field
    AllowedValues:
      - us-east-1
      - us-west-2
      - ap-southeast-1
      - ap-southeast-2
      - eu-central-1
      - eu-west-1
      - eu-west-2

Mappings: {}

Conditions: {}

Resources:
  S3Bucket:
    DependsOn: InvokeLambdaPermission
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'api-gateway-definition-import-automation-${AWS::AccountId}'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:Put'
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: swagger.json
            Function: !GetAtt 
              - UpdateApiGatewayLambdaFunction
              - Arn

  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM Role for lambda function
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator'
      Path: /
      Policies:
        - PolicyName: api-gateway-definition-import-s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: 
                  - !GetAtt S3Bucket.Arn
      Tags: []

  UpdateApiGatewayLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref SourceCodeS3Bucket
        S3Key: !Ref SourceCodeZipFileKey
      Description: Lambda function for importing API Gateway
      Environment:
        Variables:
          DEFAULT_REGION: !Ref S3Region
      Handler: update-api-gateway-resources.lambda_handler
      MemorySize: 128
      Role: !GetAtt 
        - LambdaIAMRole
        - Arn
      Runtime: python3.9
      Timeout: 120

  InvokeLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - UpdateApiGatewayLambdaFunction
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'api-gateway-definition-import-automation-${AWS::AccountId}'

Outputs:
  BucketName:
    Value: !Ref S3Bucket
    Export:
      Name: api-gateway-definition-import-automation-s3-bucket
    Description: Name of the Amazon S3 bucket created.
  RoleName:
    Value: !Ref LambdaIAMRole
    Description: Name of the IAM Role created.
  LambdaFunctionName:
    Value: !Ref UpdateApiGatewayLambdaFunction
    Description: Name of the Lambda function created.
